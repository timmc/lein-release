h1. Leiningen Release Plug-in

The release plug-in automatically manages your project's version and deploys the built artifact for you.  Note that your project must follow the maven conventions for version strings in order for lein-release to operate: http://mojo.codehaus.org/versions-maven-plugin/version-rules.html

The plug-in performs the following steps:

1. Modify the project.clj to drop the "-SNAPSHOT" suffix
2. Add the project.clj to the SCM system
3. Commit the project.clj to the SCM system
4. Tag the project with @projectName-version@
5. If the project jar file does not exist, it builds it with @lein jar@ and @lein pom@
6. Performs a Deploy (see the Deploy section below)
7. Increments the project minor version number and re-adds the "-SNAPSHOT" suffix
8. Add the project.clj to the SCM system
9. Commit the project.clj to the SCM system

Optionally, the plug-in will also write out a namespace that contains @group-id@, @artifact-id@, and @version@ vars, mirroring each change to project.clj.

h1. Usage

pre.    lein plugin install lein-release/lein-release 1.0.0

pre.    lein release

h1. Configuration

The plug-in supports a @:lein-release@ map in the project.clj

h3. @:scm@

    @:lein-release {:scm :git}@

This can be used to specify the SCM (version control) system.  The release plug-in attempts to auto-detect the version control system by inspecting the current working directory (eg, for the @.git@ directory).  If this does not work for your project you can specify the SCM system explicitly.

h3. @:deploy-via@

    @:lein-release {:deploy-via :clojars}@

This can be used to explicitly specify the deployment strategy that will be used.  The currently supported values for this are:

* @:clojars@
* @:lein-deploy@
* @:lein-install@

The release plugin attempts to detect whether to use @:lein-deploy@ or @:lein-install@ by inspecting the project.clj.  If a @:repositories@ key is present in the project.clj @:lein-deploy@ will be used.  Otherwise @:lein-install@ will be used.  @:clojars@ will only be used if it is explicitly specified in the project.clj.

h3. @:coords-ns@, @:coords-ns-base@

pre. @:lein-release {:coords-ns org.clojars.relaynetwork.clj-avro.coords}@

If provided, the specified namespace will be written to a source directory with @group-id@, @artifact-id@, and @version@ vars containing the appropriate strings.

The plug-in will attempt to guess the correct source directory, but conservatively. If @src@ is in the project's @:source-paths@ list (or @:source-path@ for lein v1), or if there is only one path configured, then it will be used; otherwise a source path must be specified explicitly:

pre. @:lein-release {:coords-ns org.clojars.relaynetwork.clj-avro.coords
                     :coords-ns-base "src/main/clojure"}@

h2. Example Configuration

pre. (defproject org.clojars.relaynetwork/clj-avro "1.0.9-SNAPSHOT"
      :description "Avro Wrapper for Clojure"
      :dev-dependencies [[swank-clojure "1.4.2"]]
      :plugins [[lein-release "1.0.0-SNAPSHOT"]]
      :lein-release {:deploy-via :clojars}
      :local-repo-classpath true
      :dependencies [[org.clojure/clojure "1.2.0"]
                     ;; [org.apache.avro/avro "1.5.4"]
                     [org.apache.avro/avro "1.6.1"]
                     [org.clojure/clojure-contrib "1.2.0"]
                     [org.clojars.kyleburton/clj-etl-utils        "1.0.41"]])

h1. Deploy

The deployment strategy is determined by the following:

* if @:deploy-via@ is specified in the configuration, its value is used
* if the project.clj has a @:repositories@ setting, then @:lein-deploy@ is used
* otherwise @:lein-install@ is used

Deployment to clojars is handled by shelling out and running:

pre. scp project-VERSION.jar pom.xml clojars@clojars.org:

Deployment via Leiningen is handled by shelling out (for a deploy or install respectively).

h1. Environment Variable: RELEASE_QUALIFIER

If set, this will be a suffix appended to the version of the released jar.

h1. Supported SCM Systems

Currently only git is supported.  Provisions have been made in the plug-in to support more SCM systems in the future.  Patches are welcome!

h1. Limitations

The plug-in uses simple heuristics (regexes!) to modify the version string in the project.clj.  If you have multiple lines (or comments) that look like a defproject it may not be able to succeed.  This approach was taken in order to not rewrite the entire project.clj file and thus loose things like formatting, indentation or comments.

h1. Authors

Kyle Burton <kyle.burton@gmail.com>
Paul Santa Clara

h1. License

Copyright (C) Relay Network LLC

Distributed under the Eclipse Public License, the same as Clojure.
